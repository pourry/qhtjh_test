<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.example.spring_boot_mode.model.dao.UrlCollectionDao">
    <resultMap id="UrlCollectionMap" type="com.example.spring_boot_mode.model.entity.UrlCollection">
        <!--    property:实体类中       column:数据库中字段          -->
        <result property="id" column="id"/>
        <result property="urlname" column="urlname"/>
        <result property="url" column="url"/>
        <result property="urllogopath" column="urllogopath"/>
        <result property="ssurltypeid" column="ssurltypeid"/>
        <result property="notes" column="notes"/>
        <result property="sscollector" column="sscollector"/>
        <result property="createTime" column="createTime"/>
        <result property="sort" column="sort"/>
        <result property="share" column="share"/>
        <result property="shareTime" column="shareTime"/>
    </resultMap>

    <sql id="selectUrlCollection">
        select id,
               urlname,
               url,
               urllogopath,
               ssurltypeid,
               notes,
               sscollector,
               createTime,
               sort,
               share,
               shareTime


        from  url_collection
    </sql>
    <select id="selectbytypeids" resultMap="UrlCollectionMap">
        <include refid="selectUrlCollection"/>
        where ssurltypeid in
        <foreach collection="typeids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
        order by sort asc
    </select>
    <insert id="toadd" >
        insert into url_collection
        (
        id,
        urlname,
        url,
        urllogopath,
        ssurltypeid,
        notes,
        sscollector,
        createTime,
        sort,
        share,
        shareTime
        )
        values
        (
        #{id},
        #{urlname},
        #{url},
        #{urllogopath},
        #{ssurltypeid},
        #{notes},
        #{sscollector},
        #{createTime},
        #{sort},
        #{share},
        #{shareTime}
        )
    </insert>
    <update id="toedit" >
        update url_collection
        <set>
            <if test="urlname != null and urlname != ''">urlname =#{urlname},</if>
            <if test="url != null and url != ''">url =#{url},</if>
            <if test="urllogopath != null and urllogopath != ''">urllogopath =#{urllogopath},</if>
            <if test="ssurltypeid != null and ssurltypeid != ''">ssurltypeid =#{ssurltypeid},</if>
            <if test="notes != null and notes != ''">notes =#{notes},</if>
            <if test="sscollector != null and sscollector != ''">sscollector =#{sscollector},</if>
            <if test="createTime != null and createTime != ''">createTime =#{createTime},</if>
            <if test="sort != null and sort != ''">sort =#{sort},</if>
            <if test="share != null ">share =#{share,jdbcType=INTEGER},</if>
            <if test="shareTime != null  and createTime != ''">shareTime =#{shareTime},</if>

        </set>
        where  id = #{id}
    </update>
    <delete id="todelete" >
    delete from url_collection
    where id in
    <foreach collection="ids" item="id" open="(" close=")" separator=",">
        #{id}
    </foreach>
    </delete>
    <delete id="todeleteBytypeId">
    delete from url_collection
    where ssurltypeid in
    <foreach collection="ids" item="id" open="(" close=")" separator=",">
        #{id}
    </foreach>
    </delete>
    <select id="selectcountbytypeidanduserid" resultType="int">
        select count(id) from url_collection
        where ssurltypeid =#{ssurltypeid} and sscollector =#{userid}
    </select>
    <select id="selectallbytwoid" resultMap="UrlCollectionMap">
        <include refid="selectUrlCollection"/>
        where  id = #{dragid}
        or ssurltypeid =
        (select ssurltypeid from url_collection where id =#{dropid})

    </select>
    <delete id="deletebytwoid" >
         delete from url_collection
         where  id = #{dragid}
         or ssurltypeid =
         (select ssurltypeid from
          ( select ssurltypeid from url_collection where id =#{dropid}) as temp)
    </delete>
    <insert id="insertList">
                insert into url_collection
        (
        id,
        urlname,
        url,
        urllogopath,
        ssurltypeid,
        notes,
        sscollector,
        createTime,
        sort,
        share,
        shareTime
        )
        values
        <foreach collection="urlCollections" separator="," item="item">
            (
            #{item.id},
            #{item.urlname},
            #{item.url},
            #{item.urllogopath},
            #{item.ssurltypeid},
            #{item.notes},
            #{item.sscollector},
            #{item.createTime},
            #{item.sort},
            #{item.share},
            #{item.shareTime}
            )
        </foreach>
    </insert>
    <select id="selectbyid" resultMap="UrlCollectionMap">
        <include refid="selectUrlCollection"/>
        where id = #{id}
    </select>
    <select id="urlshow" resultMap="UrlCollectionMap">
        <include refid="selectUrlCollection"/>
        where share = 1

        order by shareTime desc
        limit 20
    </select>
    <select id="urlhot" resultType="map">
      select
        count(urllogopath) countpath,
        urllogopath,
        REPLACE(urllogopath,'favicon.ico','') url
        from  url_collection
        where share = 1 and urllogopath is not null
        group by urllogopath
        order by count(urllogopath) desc
        limit 30
    </select>
</mapper>