<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.example.spring_boot_mode.dao.mode.NovelDao">
    <resultMap id="NovelMap" type="com.example.spring_boot_mode.entity.mode.Novel">
        <!--    property:实体类中       column:数据库中字段          -->
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="address" column="address"/>
        <result property="notes" column="notes"/>
        <result property="alias" column="alias"/>
        <result property="hasend" column="hasend"/>
        <result property="pictureURL" column="pictureURL"/>
        <result property="sscollector" column="sscollectors"/>
        <result property="createTime" column="createTime"/>
        <result property="hasendLabel" column="hasendLabel"/>
        <result property="share" column="share"/>
        <result property="shareTime" column="shareTime"/>

    </resultMap>
    <sql id="selectNovel">
        select id,
               name,
               address,
               notes,
               alias,
               hasend,
               hasendLabel,
               pictureURL,
               sscollector,
               createTime,
               share,
               shareTime
        from  novel
    </sql>
    <insert id="toadd" parameterType="com.example.spring_boot_mode.entity.mode.Novel" >
        insert into novel
        (
            id,
            name,
            address,
            notes,
            alias,
            hasend,
            hasendLabel,
            pictureURL,
            sscollector,
            createTime,
            share,
            shareTime
        )
        values(
               #{id},
               #{name},
               #{address},
               #{notes},
               #{alias},
               #{hasend},
               #{hasendLabel},
               #{pictureURL},
               #{sscollector},
               #{createTime},
               #{share},
               #{shareTime}
              )

    </insert>
    <update id="toedit" >
        update novel
        <set>
            <if test="name != null and name != ''"> name =#{name},</if>
            <if test="address != null and address != ''"> address =#{address},</if>
            <if test="notes != null and notes != ''"> notes =#{notes},</if>
            <if test="alias != null and alias != ''"> alias =#{alias},</if>
            <if test="hasend != null and hasend != ''"> hasend =#{hasend},</if>
            <if test="hasendLabel != null and hasendLabel != ''"> hasendLabel =#{hasendLabel},</if>
            <if test="pictureURL != null and pictureURL != ''"> pictureURL =#{pictureURL},</if>
            <if test="sscollector != null and sscollector != ''"> sscollector =#{sscollector},</if>
            <if test="createTime != null and createTime != ''"> createTime =#{createTime},</if>
            <if test="share != null and share != ''"> share =#{share},</if>
            <if test="shareTime != null and shareTime != ''"> shareTime =#{shareTime},</if>
        </set>
        where id = #{id}
    </update>
    <select id="getList" resultMap="NovelMap">
        <include refid="selectNovel"/>
        <where>
           <if test="animation.sscollector != null and animation.sscollector !=''">and sscollector = #{animation.sscollector}</if>
           <if test="animation.name != null and animation.name != ''">and (   name like concat('%',#{animation.name},'%')
                                                                           or alias like concat('%',#{animation.name},'%')
                                                                           or hasendLabel like concat('%',#{animation.name},'%')
                                                                           )</if>
        </where>
        order by createTime desc
        limit #{passOver},#{pageSize}
    </select>
    <select id="gettotal" resultType="int">
        select  count(id) from novel
        <where>
            <if test="sscollector != null and sscollector !=''">and sscollector = #{sscollector}</if>
            <if test="name != null and name != ''">and (   name like concat('%',#{name},'%')
                or alias like concat('%',#{name},'%')
                or hasend like concat('%',#{name},'%')
                )</if>
        </where>
    </select>
    <select id="getone" parameterType="string" resultMap="NovelMap">
        <include refid="selectNovel"/>
        where id = #{id}
    </select>
    <delete id="todelet" >
        delete from novel
        where id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>

    <select id="getNovelShow" resultMap="NovelMap">
        <include refid="selectNovel"/>
        where share = 1
        order by shareTime desc
        limit 10
    </select>

</mapper>